"Games"
{
	"bms"
	{
		"Keys"
		{
			"IVEngineServer"
			{
				"windows"	"VEngineServer023"
				"linux"		"VEngineServer023"
			}
		}
		"Signatures"
		{
			"CBasePlayer::SetSuitUpdate"	// CBasePlayer::SetSuitUpdate(CBasePlayer*, const char*, int, int)
			{
				"library"		"server"
				"windows"		"\x55\x8B\xEC\x56\x8B\xF1\x57\x83\xCF\xFF"
				"linux"			"\x55\x89\xE5\x57\x53\x83\xEC\x2A\x8B\x5D\x2A\x80\xBB\x2A\x2A\x2A\x2A\x2A"	// probably could use the symbol for this
			}
			"CreateInterface"
			{
				"library"		"engine"	// this depends on what dll the interface you want is from; we should just iteriate through the interface table manually to avoid this issue if there are other interfaces we need
				"windows"		"@CreateInterface"
				"linux"			"@CreateInterface"
			}
		}
		"Offsets"
		{
			"CBlackMesaPlayer::PickupObject"			// CBlackMesaPlayer::PickupObject(CBaseEntity*, bool)
			{
				"windows"	"433"
				"linux" 	"434"
			}
			"CBaseCombatWeapon::SendWeaponAnim"		// CBaseCombatWeapon::SendWeaponAnim(int)
			{
				"windows"	"256"
				"linux"		"257"
			}
			
			// Hooks
			"CMultiplayRules::FAllowFlashlight"		// CMultiplayRules::FAllowFlashlight()
			{
				"windows"	"56"
				"linux"		"57"
			}
			"CMultiplayRules::IsDeathmatch"		// CMultiplayRules::IsDeathmatch()
			{
				"windows"	"58"
				"linux"		"59"
			}
			"CBaseCombatCharacter::IRelationType"	// CBaseCombatCharacter::IRelationType(CBaseEntity*)
			{
				"windows"	"318"
				"linux"		"319"
			}
			"CProtoSniper::SelectSchedule"			// CProtoSniper::SelectSchedule()
			{
				"windows"	"364"
				"linux"		"365"
			}
			"CSceneEntity::FindNamedEntity"			// CSceneEntity::FindNamedEntity(char const*, CBaseEntity*, bool, bool)
			{
				"windows"	"248"
				"linux"		"253"
			}
			"CSceneEntity::FindNamedEntityClosest"			// CSceneEntity::FindNamedEntityClosest(char const*, CBaseEntity*, bool, bool, char const*)
			{
				"windows"	"249"
				"linux"		"254"
			}
			"CBaseEntity::SetModel"				// CBaseEntity::SetModel(char const*)
			{
				"windows"	"26"
				"linux"		"27"
			}
			"CBaseEntity::AcceptInput"				// CBaseEntity::AcceptInput(char const*, CBaseEntity*, CBaseEntity*, variant_t, int)
			{
				"windows"	"39"
				"linux"		"40"
			}
		}
		"Functions"
		{
			"CMultiplayRules::FAllowFlashlight"
			{
				"offset"	"CMultiplayRules::FAllowFlashlight"
				"hooktype"	"gamerules"
				"return"	"bool"
				"this"		"ignore"
				"arguments"
				{
				}
			}
			"CMultiplayRules::IsDeathmatch"
			{
				"offset"	"CMultiplayRules::IsDeathmatch"
				"hooktype"	"gamerules"
				"return"	"bool"
				"this"		"ignore"
				"arguments"
				{
				}
			}
			"CBaseCombatCharacter::IRelationType"
			{
				"offset"	"CBaseCombatCharacter::IRelationType"
				"hooktype"	"entity"
				"return"	"int"
				"this"		"entity"
				"arguments"
				{
					"pTarget"
					{
						"type"	"cbaseentity"
					}
				}
			}
			"CProtoSniper::SelectSchedule"
			{
				"offset"	"CProtoSniper::SelectSchedule"
				"hooktype"	"entity"
				"return"	"int"
				"this"		"entity"
				"arguments"
				{
				}
			}
			"CSceneEntity::FindNamedEntity"
			{
				"offset"	"CSceneEntity::FindNamedEntity"
				"hooktype"	"entity"
				"return"	"cbaseentity"
				"this"		"entity"
				"arguments"
				{
					"name"
					{
						"type"	"charptr"
					}
					"pActor"
					{
						"type"	"cbaseentity"
					}
					"bBaseFlexOnly"
					{
						"type"	"bool"
					}
					"bUseClear"
					{
						"type"	"bool"
					}
				}
			}
			"CSceneEntity::FindNamedEntityClosest"
			{
				"offset"	"CSceneEntity::FindNamedEntityClosest"
				"hooktype"	"entity"
				"return"	"cbaseentity"
				"this"		"entity"
				"arguments"
				{
					"name"
					{
						"type"	"charptr"
					}
					"pActor"
					{
						"type"	"cbaseentity"
					}
					"bBaseFlexOnly"
					{
						"type"	"bool"
					}
					"bUseClear"
					{
						"type"	"bool"
					}
					"pszSecondary"
					{
						"type"	"charptr"
					}
				}
			}
			"CBaseEntity::SetModel"
			{
				"offset"	"CBaseEntity::SetModel"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
				"arguments"
				{
					"szModelName"
					{
						"type"	"charptr"
					}
				}
			}
			"CBaseEntity::AcceptInput"
			{
				"offset"	"CBaseEntity::AcceptInput"
				"hooktype"	"entity"
				"return"	"bool"
				"this"		"entity"
				"arguments"
				{
					"szInputName"
					{
						"type"	"charptr"
					}
					"pActivator"
					{
						"type"	"cbaseentity"
					}
					"pCaller"
					{
						"type"	"cbaseentity"
					}
					"Value"
					{
						"type"	"object"
						"size"	"20"
						"flags"	"byval odtor octor oassignop"
					}
					"outputID"
					{
						"type"	"int"
					}
				}
			}
			"CBasePlayer::SetSuitUpdate"
			{
				"signature"	"CBasePlayer::SetSuitUpdate"
				"callconv"	"thiscall"	// cdecl on linux, but has thisptr
				"return"	"void"
				"this"		"entity"
				"arguments"
				{
					"name"
					{
						"type"	"charptr"
					}
					"fgroup"
					{
						"type"	"int"
					}
					"iNoRepeat"
					{
						"type"	"int"
					}
				}
			}
		}
	}
}